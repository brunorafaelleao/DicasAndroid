- Alterar a cor de textos (textView)
Modo 1: Acrescentando os valores das cores no xml
1) Criar no xml das cores (res -> values -> colors.xml) as variáveis
das cores desejadas. Antes precisa pegar o código hex da cor.
o código deve ficar assim:
<color name = "nomeparaacor">#XXXXXX</color> (XXXXXX é o código hex da cor)
2) No MainActivity.java quando for usar a cor, fazer:
xxx.setTextColor(getResources().getColor(R.color.nomeparaacor)); (xxx é o nome da variável que deseja mudar a cor)
Modo 2: Usando a classe Color com o código hex
1) No MainActivity.java inserir o nome da variável que deseja mudar de cor:
xxx.setTextColor(Color.parseColor("#XXXXXX")); (xxx é o nome da variável e o #XXXXXX é o código hex da cor)
Modo 3: Acrescentando a Classe Color e usando uma cor constante existente
1) No MainActivity.java usar:
xxx.setTextColor(Color.RED);

- Alterar um textView sem precisar adicionar uma string manualmente
1) em language (provavelmente estará Default-us) clicar e selecionar a opção
edit Translations.
Adicionar as keys e depois os nomes nos referidos idiomas.
2) Selecionar a textView, ir em attributes e selecionar text. Buscar o nome
da string criada em translations

- Alterar ícone da aplicação
1) Usar apenas formatos png ou jpeg. Preferência png por conta da facilidade de usar fundo transparente
2) Abrir a pasta "res", clicar com o botão direito em
mipmap, depois new, e depois image asset. Abrirá uma janela
com opções de criação.
Obs: pode criar ícone usando imagem, clip art ou texto
3) Para adicionar a imagem do app, selecionar a opção Foreground Layer,
clicar em image, depois clicar em Path e localizar a pasta onde se encontra o
arquivo. Encontrando o arquivo, selecionar e clicar ok
Obs: Em Scaling fazer o ajuste do tamanho da imagem ao molde do ícone.
Se quiser mudar o fundo, basta clicar em Background Layer.
Feito isso, clicar em next e depois finish

-Inserir imagens no app
1) Abrir a pasta onde as imagens se encontram,
copiar os arquivos
obs: Não usar traços, espaços ou caracteres especiais no
nome dos arquivos de imagem
2) No projeto do app, clicar com o botão direito na pasta
res -> Drawable e colar os arquivos das imagens 
3) Em activity_main.xml clicar em Palette -> Common -> ImageView
Ao inserir no visual, ajustar a imagem

- Mudar cor de botões
1) Após adicionar o botão (Common -> Button) localizar na guia atributos:
"textColor".
No caso, mudar no código do activity.main de <button> para <AppCompatButton>
o sistema vai preencher o restante do código

KOTLIN

- Para facilitar o acesso e a manipulação dos elementos da interface do usuário (UI) no código Kotlin
1) Ir em Gradle Scripts -> build.gradle.kts.
após o kotlinOptions{ xxxxx} digitar:
viewBinding{
        enable = true
    }
- Habilitar a opção de importar automaticamente as bibliotecas
1) File -> New Projects Setup -> Settings for New project -> Other Settings -> (localizar o Kotlin e marcar as
caixas de diálogo "add..." e "optimize..."

- Modificações para trabalhar com o Binding
1) criar a variável global binding, inseri-la entre o super e o setContentView. Além disso, mudar o atributo do setContentView 

class MainActivity : AppCompatActivity() {
//variavel global binding criada
    private lateinit var binding: ActivityMainBinding

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        //acrescentar o binding
        binding = ActivityMainBinding.inflate(layoutInflater)
        //mudança do setContentView ()
        setContentView(binding.root)
    }
}

- Ação que permite ler um texto em uma caixa de diálogo (plain Text) e ao clicar em um botão
o botão reconhece o texto e exibe uma mensagem numa TextView.
Depois de:
binding = ActivityMainBinding.inflate(layoutInflater)
        //mudança do setContentView ()
        setContentView(binding.root)
//botaoOla é o id do button
        binding.botaoOla.setOnClickListener {
            val nome = binding.editnome.text.toString()
        //TextResultado é o id do textView
            binding.textResultado.text = "Olá, "+ nome
